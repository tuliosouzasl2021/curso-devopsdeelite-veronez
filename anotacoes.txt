# Anotações do curso #

Aula 1 - Docker
#rumoaoelite

O que é devops e como funciona?

 O termo devops ganhou destaque em 2009 quando patrick debuar criou a primeira conferência devops day na belgica, e representa as combinações dos termos desenvolvimento e operações. Ele surguiu como uma solução para acabar com o distânciamento entre as equipes de infraestrutura e desenvolvimento, Muito comum em modelos *waterfall* e também para diminuir o tempo entre uma entrega e outra.
 É Importante deixar claro que devops não é um cargo especifico e não é um conjunto de ferramentas, mas é sim uma cultura colaborativa que engloba, Práticas, Ferramentas e Filosofias, com o objetivo de: 

- Automatizar e padronizar os processos de produção de software.
- Integrar as equipes envolvidas no processo de produção de software.
- E garantir mais produtividade e confiabilidade na entrega das aplicações.
 
# Fundamentos de Devops para clariar #

 A cultura devops se base em 5 pilares conhecido pela sigla "CALMS", CULTURA, AUTOMAÇÃO, LEAN/OU ESFORÇO (METODOLOGIA), MEDIÇÃO (MONITORAMENTO) ou COMPARTILHAMENTO (NO CASO COMPARTILHAMENTO EM INGLÊS SIGNIFICA SHARE).

 O primeiro pilar a "CULTURA" fala sobre a mudança de pensamento e comportamento dentro das empresas sobre as equipes para tornar-las mais colaborativas e comunicativas entre si, promovendo uma relação muito mais saudavel entre todas as equipes, com isso as equipes de infra e desenvolvimento ganha um certo empoderamento, na medida em que passa a poder sugir algumas otimazações ou consertar pequenas falhas sem precisa interromper o projeto ou retornar o erro para outra equipe. 

 No quisito "AUTOMAÇÃO" devops defende a construção de piplines para os processos repetitivos e que consome o tempo dos profissionais aumentando muito a produtividade da equipe e com isso as atividades que poderiam durar dias passa a durar horas ou até alguns minutos, então com o uso de piplines CI/CD ou seja de integração e entrega continua, esse processo dura poucos minutos, alem disso você evita falhas humanas desnecessárias em processos manuais, evitando o desgates e a desmotivação do profissional por executar os mesmo processos chatos o tempo todo e direcionar o foco dele para outras areas que demanda maior atenção, como a otimização do software e a resolução de imprevisto.

outro pilar importante dis respeito aos conceitos de "LEAN" a cultura devops defende o uso de gestão ágil no processo de criação de software de modo a promover o aumento da frequencia do ensicros ou seja as entegras com maior quantidade e também as entregas mais curtas ou seja utilizando esprints e dessa forma as soluções chega muito mais rapidas para os clientes e podem ser validadas e otimizadas com maior velocidade também.

Já as "MÉTRICAS" são extremamente importantes na cultura devops, porque oque não é medido não pode ser utimizado por isso as sessões periódicas de feedback e o cuidado na escolha das métricas que vão ser coletadas são fundamentais no devops, tanto para otimização do processo quanto para otimização do proprio software.

Outro pilar do devops é o "COMPARTILHAMENTO" a ideia é que as equipes compartilhem entre si conhecimentos e experiência sendo bem sucedidas ou não para proporcionar que a equipe inteira evoluam garantindo a melhoria contínua.


# COMO FUNCIONA A CULTURA DEVOPS #

Como você já deve saber o ciclo de vida devops são representado pelo simbolo do infinito, justamente para identificar a necessidade da melhoria continua se repetindo o tempo todo a cada entrega, são importante lembrar que as equipes se comunicam e se colabora entre si em todas as fases garantindo o aliamento do time, a velocidade nas entregas e a qualidade do trabalho.
São 8 fases que fazem parte do ciclo devops:

Planejamento, Codificação, Construção ou Build, Teste, empacomento ou release, deploy, operação e monitoramento. 

Planejamento são a parte do projeto onde você organiza oque vai ser feito, como, quem e quando vai ser entregue, ou seja, você define as tarefas, as agendas dos membros da equipe e as ferramentas que seram utilizadas, lembrando sempre de utilizar os conceitos da métodologia ágil, como por exemplo as esprints de entrega e compartilhamento de informações entre as equipes, através das ferramentas de gerenciamento de projetos como: jira, nochao, trello, slack ou teams.

Na fase de codificação os desenvolvedores vão codificar e revisar ali todo o código, o git são muito utilizado para controle de versão pois alem de ser muito eficiente são gratuito e opensource e alem disso são fundamental o uso de uma ferramenta de compartilhamento entre equipes, como github ou gitlab.

A fase de Build são onde os códigos construidos pelos desenvolvedores são convertidos em um entregavel ambiente, são aqui que se inicia a pip-line de "CIA" nesse momento eu vou utilizar as ferramentas de gerenciamento de pacotes como: mavem, npm e nugget junto com o docker e ferramentas de pip-line de CIA como o jenkis, github accions ou gitlab cia.

A fase de testes são onde são executados os testes, as analises de código e verificações de falhas, ou seja, são onde eu testo realmente o se o código criado tem algum problema são aqui que entra algumas ferramentas como jeyunit, nunit, sonarkilb e claro tudo isso rodando na pip-line de CIA.

Na fase de Release Ã© aonde eu gero o artefato de entrega, pode ser meu arquivo executavel, a minha imagem docker, o meu arquivo ali .ja ou a, enfim Ã© oque vai ser usado para fazer o deploy em meu ambiente, e nesse ponto Ã© que entram as pip-lines de CID.

No deploy Ã© aonde a aplicaÃ§Ã£o Ã© entregue no ambiente e aqui Ã© onde entra em cena as ferramentas de infraestrutura como cÃ³digo, como o terraform e o assimble, alem de serviÃ§o de cloud como: aws, azure e google. tudo isso integrado na pip-line de "CID".

Quando chega na operaÃ§Ã£o eu preciso garantir que a aplicaÃ§Ã£o vai ser executada no ambiente com instabilidade, confiabilidade e resiliencia, e aqui o kubernetes ele entra como protagonista como a principal ferramenta de orquestraÃ§Ã£o de container no mercado.

Com a aplicaÃ§Ã£o entregue sendo executada no ambiente chega a hora de monitorar toda a informaÃ§Ã£o e coletar as metricas para aplicaÃ§Ã£o e tambÃ©m do ambiente, para ser utilizadas no planejamento das melhorias alem disso Ã© claro a atencipar qualquer tipo de problema que possa acontecer e Ã© aqui que entra as ferramentas como: prometheus, ieger, elastic e grafana. todos entra em aÃ§Ã£o em forma simutanea.
Depois volta dnv para o ciclo de planejamento e tudo recomeÃ§a. 



Significado waterfall: 
 A metodologia waterfall, também conhecida como modelo cascata, é um modelo tradicional de desenvolvimento de software que segue uma abordagem sequencial e linear, onde cada fase do projeto é concluída antes de passar para a próxima. Aqui está um resumo das principais etapas do modelo waterfall:
Definição de Requisitos: Nesta fase, os requisitos do projeto são coletados e documentados detalhadamente, com base nas necessidades dos usuários e nas expectativas dos stakeholders.
Design: Após a definição dos requisitos, o projeto passa para a fase de design, onde os elementos do sistema são planejados e projetados em detalhes. Isso pode incluir o design de arquitetura, design de interface de usuário, design de banco de dados, entre outros.
Implementação: Na fase de implementação, o código do software é desenvolvido com base no design definido na fase anterior. Os programadores escrevem o código fonte e realizam testes unitários para verificar se o código está funcionando corretamente.
Testes: Após a implementação, o software passa por uma fase de testes extensivos para identificar e corrigir quaisquer defeitos ou erros. Os testes podem incluir testes de integração, testes de sistema, testes de desempenho, entre outros.
Implantação: Uma vez que o software tenha sido completamente testado e considerado estável, ele é implantado no ambiente de produção e disponibilizado aos usuários finais.
Manutenção: Após a implantação, o software pode passar por uma fase de manutenção, onde são feitas correções de bugs, atualizações de segurança, melhorias de desempenho e outras modificações necessárias ao longo do tempo.
Uma das principais características do modelo waterfall é a sua abordagem sequencial, o que significa que cada fase deve ser concluída antes de prosseguir para a próxima. Isso pode levar a um processo lento e inflexível, uma vez que mudanças nos requisitos ou problemas identificados em fases posteriores podem exigir retrabalho nas fases anteriores. No entanto, o modelo waterfall pode ser útil em certos contextos, especialmente quando os requisitos são claros e estáveis desde o início do projeto. 

